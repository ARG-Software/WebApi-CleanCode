// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RF.Infrastructure.Data.Adapters.EntityFrameworkCore;

namespace RF.Database.Migrations.Migrations.Output
{
    [DbContext(typeof(EFCoreContext))]
    partial class EFCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RF.Domain.Entities.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("IPI");

                    b.Property<string>("Isni");

                    b.Property<int?>("LabelId");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("PayeeName");

                    b.Property<string>("TaxId");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("RF.Domain.Entities.CWRFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<byte[]>("File");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CWRFile");
                });

            modelBuilder.Entity("RF.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Region", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("RF.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("RF.Domain.Entities.DistributionAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("DistributionAgreementFilterId");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DistributionAgreementFilterId");

                    b.ToTable("DistributionAgreement");
                });

            modelBuilder.Entity("RF.Domain.Entities.DistributionAgreementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgreementGroup");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int?>("DistributionAgreementId");

                    b.Property<int?>("EpisodeId");

                    b.Property<int?>("IsrcId");

                    b.Property<int?>("IswcId");

                    b.Property<int?>("LabelId");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("PlatformTierId");

                    b.Property<int?>("PlatformTypeId");

                    b.Property<int?>("ProductionTitleId");

                    b.Property<int?>("ProductionTypeId");

                    b.Property<int?>("PublisherId");

                    b.Property<double>("Rate");

                    b.Property<int>("RecipientId");

                    b.Property<int?>("RegionId");

                    b.Property<int?>("RoyaltyTypeGroupId");

                    b.Property<int?>("RoyaltyTypeId");

                    b.Property<double>("Share");

                    b.Property<int?>("SocietyId");

                    b.Property<int?>("SourceId");

                    b.Property<int?>("TerritoryId");

                    b.HasKey("Id");

                    b.HasIndex("DistributionAgreementId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("IsrcId");

                    b.HasIndex("IswcId");

                    b.HasIndex("LabelId");

                    b.HasIndex("PlatformTierId");

                    b.HasIndex("PlatformTypeId");

                    b.HasIndex("ProductionTitleId");

                    b.HasIndex("ProductionTypeId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("RegionId");

                    b.HasIndex("RoyaltyTypeGroupId");

                    b.HasIndex("RoyaltyTypeId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("DistributionAgreementDetail");
                });

            modelBuilder.Entity("RF.Domain.Entities.DistributionAgreementFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Album");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("Episode");

                    b.Property<bool>("Label");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<bool>("PlatformTier");

                    b.Property<bool>("PlatformType");

                    b.Property<bool>("ProductionTitle");

                    b.Property<bool>("ProductionType");

                    b.Property<bool>("Publisher");

                    b.Property<bool>("Region");

                    b.Property<bool>("RoyaltyType");

                    b.Property<bool>("RoyaltyTypeGroup");

                    b.Property<bool>("Society");

                    b.Property<bool>("Source");

                    b.Property<bool>("Territory");

                    b.HasKey("Id");

                    b.ToTable("DistributionAgreementFilter");
                });

            modelBuilder.Entity("RF.Domain.Entities.EAN", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Configuration");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Default");

                    b.Property<string>("Description");

                    b.Property<int>("DistributingLabelId");

                    b.Property<int>("LabelId");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DistributingLabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("EAN");
                });

            modelBuilder.Entity("RF.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<int?>("ProductionTitleId");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTitleId");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("RF.Domain.Entities.EpisodeAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("EpisodeId");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Label", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Address");

                    b.Property<bool>("Controlled");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Isni");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("PayeeName");

                    b.Property<string>("TaxId");

                    b.HasKey("Id");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("RF.Domain.Entities.LabelAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("LabelId");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.ToTable("LabelAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.MechanicalLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Key");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.HasKey("Id");

                    b.ToTable("MechanicalLicense");
                });

            modelBuilder.Entity("RF.Domain.Entities.Payee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("IBAN");

                    b.Property<string>("MailingCountry");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("PaypalAddress");

                    b.Property<string>("PostalCode");

                    b.Property<string>("RoutingNumber");

                    b.Property<string>("State");

                    b.Property<string>("SwiftCode");

                    b.Property<string>("TaxId");

                    b.HasKey("Id");

                    b.ToTable("Payee");
                });

            modelBuilder.Entity("RF.Domain.Entities.PaymentReceived", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<double>("ExchangeRate");

                    b.Property<double>("GrossAmountForeign");

                    b.Property<double>("GrossAmountLocal");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<double>("NetAmountForeign");

                    b.Property<double>("NetAmountLocal");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<bool>("Reconciled");

                    b.Property<int>("SourceId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SourceId");

                    b.ToTable("PaymentReceived");
                });

            modelBuilder.Entity("RF.Domain.Entities.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("PlatformTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PlatformTypeId");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("RF.Domain.Entities.PlatformTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("PlatformId");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("PlatformTier");
                });

            modelBuilder.Entity("RF.Domain.Entities.PlatformTierAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("PlatformTierId");

                    b.HasKey("Id");

                    b.HasIndex("PlatformTierId");

                    b.ToTable("PlatformTierAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.PlatformType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PlatformType");
                });

            modelBuilder.Entity("RF.Domain.Entities.ProductionTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("ProductionTypeId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTypeId");

                    b.ToTable("ProductionTitle");
                });

            modelBuilder.Entity("RF.Domain.Entities.ProductionTitleAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("ProductionTitleId");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTitleId");

                    b.ToTable("ProductionTitleAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.ProductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ProductionType");
                });

            modelBuilder.Entity("RF.Domain.Entities.Publisher", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("ContactName");

                    b.Property<bool>("Controlled");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("IPIBaseNumber");

                    b.Property<string>("IPINameNumber");

                    b.Property<int>("MRAffiliationId");

                    b.Property<string>("MailAddress");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("PRAffiliationId");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("PublisherTypeId");

                    b.Property<int>("SRAffiliationId");

                    b.Property<string>("TaxId");

                    b.HasKey("Id");

                    b.HasIndex("MRAffiliationId");

                    b.HasIndex("PRAffiliationId");

                    b.HasIndex("PublisherTypeId");

                    b.HasIndex("SRAffiliationId");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("RF.Domain.Entities.PublisherAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("PublisherId");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("PublisherAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.PublisherType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PublisherType");
                });

            modelBuilder.Entity("RF.Domain.Entities.Recipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("PayeeId");

                    b.HasKey("Id");

                    b.HasIndex("PayeeId");

                    b.ToTable("Recipient");
                });

            modelBuilder.Entity("RF.Domain.Entities.RoyaltyDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<double>("Rate");

                    b.Property<int>("RecipientId");

                    b.Property<int>("StatementDetailId");

                    b.Property<int>("WriterId");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("StatementDetailId");

                    b.HasIndex("WriterId");

                    b.ToTable("RoyaltyDistribution");
                });

            modelBuilder.Entity("RF.Domain.Entities.RoyaltyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("RoyaltyTypeGroupId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("RoyaltyTypeGroupId");

                    b.ToTable("RoyaltyType");
                });

            modelBuilder.Entity("RF.Domain.Entities.RoyaltyTypeAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("RoyaltyTypeId");

                    b.Property<int>("SourceId");

                    b.HasKey("Id");

                    b.HasIndex("RoyaltyTypeId");

                    b.HasIndex("SourceId");

                    b.ToTable("RoyaltyTypeAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.RoyaltyTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RoyaltyTypeGroup");
                });

            modelBuilder.Entity("RF.Domain.Entities.Society", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Acronym");

                    b.Property<int>("Affiliates");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("TerritoryId");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Society");
                });

            modelBuilder.Entity("RF.Domain.Entities.SocietyAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("SocietyId");

                    b.HasKey("Id");

                    b.HasIndex("SocietyId");

                    b.ToTable("SocietyAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Song", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CdIdentifier");

                    b.Property<int>("CompanyId");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int?>("FirstReleaseCatalogNumber");

                    b.Property<string>("IntendedPurpose");

                    b.Property<string>("Library");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("PDTitle");

                    b.Property<string>("ProductionTitle");

                    b.Property<bool?>("PublicDomain");

                    b.Property<string>("SongTitle");

                    b.Property<string>("WorkTitleCDCut");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("RF.Domain.Entities.SongAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("SongId");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("SongAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.SongCodeIdentifier.ISRC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArtistId");

                    b.Property<string>("Code");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Default");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("FirstReleaseDate");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<TimeSpan?>("RecordingDuration");

                    b.Property<string>("RecordingName");

                    b.Property<int>("SongId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("ISRC");
                });

            modelBuilder.Entity("RF.Domain.Entities.SongCodeIdentifier.ISWC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Default");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("SongId");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("ISWC");
                });

            modelBuilder.Entity("RF.Domain.Entities.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("RF.Domain.Entities.SourceSongCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("SongId");

                    b.Property<int>("SourceId");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex("SourceId");

                    b.ToTable("SourceSongCode");
                });

            modelBuilder.Entity("RF.Domain.Entities.StatementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlbumId");

                    b.Property<double?>("BonusAmount");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int?>("EpisodeId");

                    b.Property<int?>("ISRCId");

                    b.Property<int?>("ISWCId");

                    b.Property<int?>("LabelId");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("PerformanceDate");

                    b.Property<int?>("PlatformTierId");

                    b.Property<int?>("ProductionTitleId");

                    b.Property<int?>("PublisherId");

                    b.Property<int>("Quantity");

                    b.Property<double>("RoyaltyNetForeign");

                    b.Property<double>("RoyaltyNetUsd");

                    b.Property<int?>("RoyaltyTypeId");

                    b.Property<int?>("SocietyId");

                    b.Property<int>("SongId");

                    b.Property<int>("StatementHeaderId");

                    b.Property<int?>("TerritoryId");

                    b.Property<double?>("UnitRate");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("ISRCId");

                    b.HasIndex("ISWCId");

                    b.HasIndex("LabelId");

                    b.HasIndex("PlatformTierId");

                    b.HasIndex("ProductionTitleId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RoyaltyTypeId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("SongId");

                    b.HasIndex("StatementHeaderId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("StatementDetail");
                });

            modelBuilder.Entity("RF.Domain.Entities.StatementHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("PaymentReceivedId");

                    b.Property<int>("TemplateId");

                    b.Property<double>("TotalForeign");

                    b.Property<double>("TotalLocal");

                    b.HasKey("Id");

                    b.HasIndex("PaymentReceivedId");

                    b.HasIndex("TemplateId");

                    b.ToTable("StatementHeader");
                });

            modelBuilder.Entity("RF.Domain.Entities.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Definition");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("SourceId");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("RF.Domain.Entities.Territory", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Territory");
                });

            modelBuilder.Entity("RF.Domain.Entities.TerritoryAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("TerritoryId");

                    b.HasKey("Id");

                    b.HasIndex("TerritoryId");

                    b.ToTable("TerritoryAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.UPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlbumId");

                    b.Property<string>("Configuration");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Default");

                    b.Property<string>("Description");

                    b.Property<int>("DistributingLabelId");

                    b.Property<int>("LabelId");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DistributingLabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("UPC");
                });

            modelBuilder.Entity("RF.Domain.Entities.Writer", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Controlled");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("WriterFN");

                    b.Property<int?>("WriterIPIBaseNumber");

                    b.Property<int>("WriterIPINameNumber");

                    b.Property<string>("WriterLN");

                    b.Property<string>("WriterMRAff");

                    b.Property<string>("WriterPRAff");

                    b.HasKey("Id");

                    b.ToTable("Writer");
                });

            modelBuilder.Entity("RF.Domain.Entities.WriterRoleCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.ToTable("WriterRoleCode");
                });

            modelBuilder.Entity("RF.Domain.Entities.WriterShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedByUserLogin");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("DistributionAgreementId");

                    b.Property<string>("ModifiedByUserLogin");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<double>("Share");

                    b.Property<int>("SongId");

                    b.Property<int>("WriterId");

                    b.Property<int>("WriterRoleCodeId");

                    b.HasKey("Id");

                    b.HasIndex("DistributionAgreementId");

                    b.HasIndex("SongId");

                    b.HasIndex("WriterId");

                    b.HasIndex("WriterRoleCodeId");

                    b.ToTable("WriterShare");
                });

            modelBuilder.Entity("RF.Domain.Entities.Artist", b =>
                {
                    b.HasOne("RF.Domain.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.CWRFile", b =>
                {
                    b.HasOne("RF.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.DistributionAgreement", b =>
                {
                    b.HasOne("RF.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.DistributionAgreementFilter", "DistributionAgreementFilter")
                        .WithMany()
                        .HasForeignKey("DistributionAgreementFilterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.DistributionAgreementDetail", b =>
                {
                    b.HasOne("RF.Domain.Entities.DistributionAgreement", "DistributionAgreement")
                        .WithMany()
                        .HasForeignKey("DistributionAgreementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.SongCodeIdentifier.ISRC", "Isrc")
                        .WithMany()
                        .HasForeignKey("IsrcId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.SongCodeIdentifier.ISWC", "Iswc")
                        .WithMany()
                        .HasForeignKey("IswcId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.PlatformTier", "PlatformTier")
                        .WithMany()
                        .HasForeignKey("PlatformTierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.PlatformType", "PlatformType")
                        .WithMany()
                        .HasForeignKey("PlatformTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.ProductionTitle", "ProductionTitle")
                        .WithMany()
                        .HasForeignKey("ProductionTitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.ProductionType", "ProductionType")
                        .WithMany()
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Recipient", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.RoyaltyTypeGroup", "RoyaltyTypeGroup")
                        .WithMany()
                        .HasForeignKey("RoyaltyTypeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.RoyaltyType", "RoyaltyType")
                        .WithMany()
                        .HasForeignKey("RoyaltyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.EAN", b =>
                {
                    b.HasOne("RF.Domain.Entities.Label", "DistributingLabel")
                        .WithMany()
                        .HasForeignKey("DistributingLabelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Episode", b =>
                {
                    b.HasOne("RF.Domain.Entities.ProductionTitle", "ProductionTitle")
                        .WithMany()
                        .HasForeignKey("ProductionTitleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.EpisodeAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.LabelAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.PaymentReceived", b =>
                {
                    b.HasOne("RF.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Platform", b =>
                {
                    b.HasOne("RF.Domain.Entities.PlatformType", "PlatformType")
                        .WithMany()
                        .HasForeignKey("PlatformTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.PlatformTier", b =>
                {
                    b.HasOne("RF.Domain.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.PlatformTierAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.PlatformTier", "PlatformTier")
                        .WithMany()
                        .HasForeignKey("PlatformTierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.ProductionTitle", b =>
                {
                    b.HasOne("RF.Domain.Entities.ProductionType", "ProductionType")
                        .WithMany()
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.ProductionTitleAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.ProductionTitle", "ProductionTitle")
                        .WithMany()
                        .HasForeignKey("ProductionTitleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Publisher", b =>
                {
                    b.HasOne("RF.Domain.Entities.Society", "MRAAffiliation")
                        .WithMany()
                        .HasForeignKey("MRAffiliationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Society", "PRAAffiliation")
                        .WithMany()
                        .HasForeignKey("PRAffiliationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.PublisherType", "PublisherType")
                        .WithMany()
                        .HasForeignKey("PublisherTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Society", "SRAAffiliation")
                        .WithMany()
                        .HasForeignKey("SRAffiliationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.PublisherAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Recipient", b =>
                {
                    b.HasOne("RF.Domain.Entities.Payee", "Payee")
                        .WithMany()
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.RoyaltyDistribution", b =>
                {
                    b.HasOne("RF.Domain.Entities.Recipient", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.StatementDetail", "StatementDetail")
                        .WithMany()
                        .HasForeignKey("StatementDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Writer", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.RoyaltyType", b =>
                {
                    b.HasOne("RF.Domain.Entities.RoyaltyTypeGroup", "RoyaltyTypeGroup")
                        .WithMany()
                        .HasForeignKey("RoyaltyTypeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.RoyaltyTypeAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.RoyaltyType", "RoyaltyType")
                        .WithMany()
                        .HasForeignKey("RoyaltyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Society", b =>
                {
                    b.HasOne("RF.Domain.Entities.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.SocietyAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Song", b =>
                {
                    b.HasOne("RF.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.SongAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.SongCodeIdentifier.ISRC", b =>
                {
                    b.HasOne("RF.Domain.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.SongCodeIdentifier.ISWC", b =>
                {
                    b.HasOne("RF.Domain.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.SourceSongCode", b =>
                {
                    b.HasOne("RF.Domain.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.StatementDetail", b =>
                {
                    b.HasOne("RF.Domain.Entities.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.SongCodeIdentifier.ISRC", "ISRC")
                        .WithMany()
                        .HasForeignKey("ISRCId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.SongCodeIdentifier.ISWC", "ISWC")
                        .WithMany()
                        .HasForeignKey("ISWCId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.PlatformTier", "PlatformTier")
                        .WithMany()
                        .HasForeignKey("PlatformTierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.ProductionTitle", "ProductionTitle")
                        .WithMany()
                        .HasForeignKey("ProductionTitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.RoyaltyType", "RoyaltyType")
                        .WithMany()
                        .HasForeignKey("RoyaltyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.StatementHeader", "StatementHeader")
                        .WithMany()
                        .HasForeignKey("StatementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.StatementHeader", b =>
                {
                    b.HasOne("RF.Domain.Entities.PaymentReceived", "PaymentReceived")
                        .WithMany()
                        .HasForeignKey("PaymentReceivedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Template", b =>
                {
                    b.HasOne("RF.Domain.Entities.Source", "Source")
                        .WithMany("Templates")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Territory", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.TerritoryAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.UPC", b =>
                {
                    b.HasOne("RF.Domain.Entities.Label", "DistributingLabel")
                        .WithMany()
                        .HasForeignKey("DistributingLabelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.WriterShare", b =>
                {
                    b.HasOne("RF.Domain.Entities.DistributionAgreement", "DistributionAgreement")
                        .WithMany()
                        .HasForeignKey("DistributionAgreementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Writer", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.WriterRoleCode", "WriterRoleCode")
                        .WithMany()
                        .HasForeignKey("WriterRoleCodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
