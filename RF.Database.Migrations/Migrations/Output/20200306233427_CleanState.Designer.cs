// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RF.Infrastructure.Data.Adapters.EntityFrameworkCore;

namespace RF.Database.Migrations.Migrations.Output
{
    [DbContext(typeof(EFCoreContext))]
    [Migration("20200306233427_CleanState")]
    partial class CleanState
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("RF.Domain.Entities.Core.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IPI")
                        .HasColumnType("text");

                    b.Property<string>("Isni")
                        .HasColumnType("text");

                    b.Property<int?>("LabelId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PayeeName")
                        .HasColumnType("text");

                    b.Property<string>("TaxId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.CWRFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CWRFile");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.DistributionAgreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DistributionAgreementFilterId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DistributionAgreementFilterId");

                    b.ToTable("DistributionAgreement");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.DistributionAgreementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AgreementGroup")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DistributionAgreementId")
                        .HasColumnType("integer");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<int?>("IsrcId")
                        .HasColumnType("integer");

                    b.Property<int?>("IswcId")
                        .HasColumnType("integer");

                    b.Property<int?>("LabelId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PlatformTierId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductionTitleId")
                        .HasColumnType("integer");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<int>("RecipientId")
                        .HasColumnType("integer");

                    b.Property<int?>("RoyaltyTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("Share")
                        .HasColumnType("double precision");

                    b.Property<int?>("SocietyId")
                        .HasColumnType("integer");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DistributionAgreementId");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("IsrcId");

                    b.HasIndex("IswcId");

                    b.HasIndex("LabelId");

                    b.HasIndex("PlatformTierId");

                    b.HasIndex("ProductionTitleId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("RoyaltyTypeId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("DistributionAgreementDetail");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.DistributionAgreementFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<bool>("Album")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Episode")
                        .HasColumnType("boolean");

                    b.Property<bool>("Label")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("PlatformTier")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProductionTitle")
                        .HasColumnType("boolean");

                    b.Property<bool>("Publisher")
                        .HasColumnType("boolean");

                    b.Property<bool>("RoyaltyType")
                        .HasColumnType("boolean");

                    b.Property<bool>("Society")
                        .HasColumnType("boolean");

                    b.Property<bool>("Source")
                        .HasColumnType("boolean");

                    b.Property<bool>("Territory")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DistributionAgreementFilter");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.EAN", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DistributingLabelId")
                        .HasColumnType("integer");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DistributingLabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("EAN");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<int?>("ProductionTitleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTitleId");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.EpisodeAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Label", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<bool>("Controlled")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Isni")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PayeeName")
                        .HasColumnType("text");

                    b.Property<string>("TaxId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.LabelAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.ToTable("LabelAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.MechanicalLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("MechanicalLicense");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Payee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IBAN")
                        .HasColumnType("text");

                    b.Property<string>("MailingCountry")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PaypalAddress")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("RoutingNumber")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("SwiftCode")
                        .HasColumnType("text");

                    b.Property<string>("TaxId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Payee");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.PaymentReceived", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("double precision");

                    b.Property<double>("GrossAmountForeign")
                        .HasColumnType("double precision");

                    b.Property<double>("GrossAmountLocal")
                        .HasColumnType("double precision");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("NetAmountForeign")
                        .HasColumnType("double precision");

                    b.Property<double>("NetAmountLocal")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Reconciled")
                        .HasColumnType("boolean");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SourceId");

                    b.ToTable("PaymentReceived");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PlatformTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlatformTypeId");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.PlatformTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("PlatformTier");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.PlatformTierAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PlatformTierId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlatformTierId");

                    b.ToTable("PlatformTierAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.PlatformType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PlatformType");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.ProductionTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTypeId");

                    b.ToTable("ProductionTitle");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.ProductionTitleAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProductionTitleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionTitleId");

                    b.ToTable("ProductionTitleAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.ProductionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductionType");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("ContactName")
                        .HasColumnType("text");

                    b.Property<bool>("Controlled")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("IPIBaseNumber")
                        .HasColumnType("text");

                    b.Property<string>("IPINameNumber")
                        .HasColumnType("text");

                    b.Property<int>("MRAffiliationId")
                        .HasColumnType("integer");

                    b.Property<string>("MailAddress")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PRAffiliationId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PublisherTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SRAffiliationId")
                        .HasColumnType("integer");

                    b.Property<string>("TaxId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MRAffiliationId");

                    b.HasIndex("PRAffiliationId");

                    b.HasIndex("PublisherTypeId");

                    b.HasIndex("SRAffiliationId");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.PublisherAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("PublisherAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.PublisherType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PublisherType");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Recipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PayeeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PayeeId");

                    b.ToTable("Recipient");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Region", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.RoyaltyDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<int>("RecipientId")
                        .HasColumnType("integer");

                    b.Property<int>("StatementDetailId")
                        .HasColumnType("integer");

                    b.Property<int>("WriterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("StatementDetailId");

                    b.HasIndex("WriterId");

                    b.ToTable("RoyaltyDistribution");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.RoyaltyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoyaltyType");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.RoyaltyTypeAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RoyaltyTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoyaltyTypeId");

                    b.HasIndex("SourceId");

                    b.ToTable("RoyaltyTypeAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Society", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.Property<int>("Affiliates")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Society");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.SocietyAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SocietyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SocietyId");

                    b.ToTable("SocietyAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Song", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("CdIdentifier")
                        .HasColumnType("text");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("FirstReleaseCatalogNumber")
                        .HasColumnType("integer");

                    b.Property<string>("IntendedPurpose")
                        .HasColumnType("text");

                    b.Property<string>("Library")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PDTitle")
                        .HasColumnType("text");

                    b.Property<string>("ProductionTitle")
                        .HasColumnType("text");

                    b.Property<bool?>("PublicDomain")
                        .HasColumnType("boolean");

                    b.Property<string>("SongTitle")
                        .HasColumnType("text");

                    b.Property<string>("WorkTitleCDCut")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.SongAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("SongAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.SongCodeIdentifier.ISRC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FirstReleaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("RecordingDuration")
                        .HasColumnType("interval");

                    b.Property<string>("RecordingName")
                        .HasColumnType("text");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("ISRC");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.SongCodeIdentifier.ISWC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("ISWC");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.SourceSongCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.HasIndex("SourceId");

                    b.ToTable("SourceSongCode");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.StatementDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<double?>("BonusAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ISRCId")
                        .HasColumnType("integer");

                    b.Property<int?>("ISWCId")
                        .HasColumnType("integer");

                    b.Property<int?>("LabelId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PerformanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PlatformTierId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductionTitleId")
                        .HasColumnType("integer");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<double>("RoyaltyNetForeign")
                        .HasColumnType("double precision");

                    b.Property<double>("RoyaltyNetUsd")
                        .HasColumnType("double precision");

                    b.Property<int>("RoyaltyTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SocietyId")
                        .HasColumnType("integer");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("StatementHeaderId")
                        .HasColumnType("integer");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("integer");

                    b.Property<double?>("UnitRate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("ISRCId");

                    b.HasIndex("ISWCId");

                    b.HasIndex("LabelId");

                    b.HasIndex("PlatformTierId");

                    b.HasIndex("ProductionTitleId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RoyaltyTypeId");

                    b.HasIndex("SocietyId");

                    b.HasIndex("SongId");

                    b.HasIndex("StatementHeaderId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("StatementDetail");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.StatementHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PaymentReceivedId")
                        .HasColumnType("integer");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<double>("TotalForeign")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalLocal")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PaymentReceivedId");

                    b.HasIndex("TemplateId");

                    b.ToTable("StatementHeader");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Territory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Territory");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.TerritoryAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TerritoryId");

                    b.ToTable("TerritoryAlias");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.UPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DistributingLabelId")
                        .HasColumnType("integer");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DistributingLabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("UPC");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Writer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Controlled")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WriterFN")
                        .HasColumnType("text");

                    b.Property<int?>("WriterIPIBaseNumber")
                        .HasColumnType("integer");

                    b.Property<int>("WriterIPINameNumber")
                        .HasColumnType("integer");

                    b.Property<string>("WriterLN")
                        .HasColumnType("text");

                    b.Property<string>("WriterMRAff")
                        .HasColumnType("text");

                    b.Property<string>("WriterPRAff")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Writer");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.WriterRoleCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WriterRoleCode");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.WriterShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("CreatedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DistributionAgreementId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Share")
                        .HasColumnType("double precision");

                    b.Property<int>("SongId")
                        .HasColumnType("integer");

                    b.Property<int>("WriterId")
                        .HasColumnType("integer");

                    b.Property<int>("WriterRoleCodeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DistributionAgreementId");

                    b.HasIndex("SongId");

                    b.HasIndex("WriterId");

                    b.HasIndex("WriterRoleCodeId");

                    b.ToTable("WriterShare");
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Artist", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.CWRFile", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.DistributionAgreement", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.DistributionAgreementFilter", "DistributionAgreementFilter")
                        .WithMany()
                        .HasForeignKey("DistributionAgreementFilterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.DistributionAgreementDetail", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.DistributionAgreement", "DistributionAgreement")
                        .WithMany()
                        .HasForeignKey("DistributionAgreementId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.SongCodeIdentifier.ISRC", "Isrc")
                        .WithMany()
                        .HasForeignKey("IsrcId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.SongCodeIdentifier.ISWC", "Iswc")
                        .WithMany()
                        .HasForeignKey("IswcId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.PlatformTier", "PlatformTier")
                        .WithMany()
                        .HasForeignKey("PlatformTierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.ProductionTitle", "ProductionTitle")
                        .WithMany()
                        .HasForeignKey("ProductionTitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Recipient", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.RoyaltyType", "RoyaltyType")
                        .WithMany()
                        .HasForeignKey("RoyaltyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.EAN", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Label", "DistributingLabel")
                        .WithMany()
                        .HasForeignKey("DistributingLabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Episode", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.ProductionTitle", "ProductionTitle")
                        .WithMany()
                        .HasForeignKey("ProductionTitleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.EpisodeAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.LabelAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.PaymentReceived", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Platform", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.PlatformType", "PlatformType")
                        .WithMany()
                        .HasForeignKey("PlatformTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.PlatformTier", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.PlatformTierAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.PlatformTier", "PlatformTier")
                        .WithMany()
                        .HasForeignKey("PlatformTierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.ProductionTitle", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.ProductionType", "ProductionType")
                        .WithMany()
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.ProductionTitleAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.ProductionTitle", "ProductionTitle")
                        .WithMany()
                        .HasForeignKey("ProductionTitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Publisher", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Society", "MRAAffiliation")
                        .WithMany()
                        .HasForeignKey("MRAffiliationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Society", "PRAAffiliation")
                        .WithMany()
                        .HasForeignKey("PRAffiliationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.PublisherType", "PublisherType")
                        .WithMany()
                        .HasForeignKey("PublisherTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Society", "SRAAffiliation")
                        .WithMany()
                        .HasForeignKey("SRAffiliationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.PublisherAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Recipient", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Payee", "Payee")
                        .WithMany()
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.RoyaltyDistribution", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Recipient", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.StatementDetail", "StatementDetail")
                        .WithMany()
                        .HasForeignKey("StatementDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Writer", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.RoyaltyTypeAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.RoyaltyType", "RoyaltyType")
                        .WithMany()
                        .HasForeignKey("RoyaltyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Society", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.SocietyAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Song", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.SongAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.SongCodeIdentifier.ISRC", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.SongCodeIdentifier.ISWC", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.SourceSongCode", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.StatementDetail", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.SongCodeIdentifier.ISRC", "ISRC")
                        .WithMany()
                        .HasForeignKey("ISRCId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.SongCodeIdentifier.ISWC", "ISWC")
                        .WithMany()
                        .HasForeignKey("ISWCId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.PlatformTier", "PlatformTier")
                        .WithMany()
                        .HasForeignKey("PlatformTierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.ProductionTitle", "ProductionTitle")
                        .WithMany()
                        .HasForeignKey("ProductionTitleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.RoyaltyType", "RoyaltyType")
                        .WithMany()
                        .HasForeignKey("RoyaltyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Society", "Society")
                        .WithMany()
                        .HasForeignKey("SocietyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.StatementHeader", "StatementHeader")
                        .WithMany()
                        .HasForeignKey("StatementHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.StatementHeader", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.PaymentReceived", "PaymentReceived")
                        .WithMany()
                        .HasForeignKey("PaymentReceivedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RF.Domain.Entities.Core.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Template", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Source", "Source")
                        .WithMany("Templates")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.Territory", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.TerritoryAlias", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.UPC", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.Label", "DistributingLabel")
                        .WithMany()
                        .HasForeignKey("DistributingLabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("RF.Domain.Entities.Core.WriterShare", b =>
                {
                    b.HasOne("RF.Domain.Entities.Core.DistributionAgreement", "DistributionAgreement")
                        .WithMany()
                        .HasForeignKey("DistributionAgreementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.Writer", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RF.Domain.Entities.Core.WriterRoleCode", "WriterRoleCode")
                        .WithMany()
                        .HasForeignKey("WriterRoleCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
